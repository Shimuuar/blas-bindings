
* Add getSum/sum.  Put in re-write rules from scale and add to axpy.  Here
 is the old code and re-write rules:
 
    unsafeGetSum :: (BLAS1 e) => 
        e -> DVector s n e -> e -> DVector t n e -> IO (DVector r n e)
    unsafeGetSum 1 x beta y
        | beta /= 1 = unsafeGetSum beta y 1 x
    unsafeGetSum alpha x beta y
        | isConj x = do
            s <- unsafeGetSum (E.conj alpha) (conj x) (E.conj beta) (conj y)
            return (conj s)
        | otherwise = do
            s <- newCopy y
            scaleBy beta (unsafeThaw s)
            axpy alpha x (unsafeThaw s)
            return (unsafeCoerce s)

    {-# RULES
    "scale/plus"   forall k l x y. plus (scale k x) (scale l y) = add k x l y
    "scale1/plus"  forall k x y.   plus (scale k x) y = add k x 1 y
    "scale2/plus"  forall k x y.   plus x (scale k y) = add 1 x k y

    "scale/minus"  forall k l x y. minus (scale k x) (scale l y) = 
                                       add k x (-l) y
    "scale1/minus" forall k x y.   minus (scale k x) y = add k x (-1) y
    "scale2/minus" forall k x y.   minus x (scale k y) = add 1 x (-k) y
      #-}


* Put 'isReal' in Elem class and specialize swap, copy, axpy, dot.

* Change copy/axpy to copyTensor/copyAxpy.  Put in aliases for copyVector etc.

* Put unsafeSwap in a SwapTensor type class.  Remove the re-write rule in
IOVector.

* Move unsafeIOToM into separate file.

* submatrix -> submatrixView.  Add getSubmatrix function?

* Having (//) in ITensor makes BLAS1 a pre-requisite.  Move (//) to seperate
  typeclass to get around this?
